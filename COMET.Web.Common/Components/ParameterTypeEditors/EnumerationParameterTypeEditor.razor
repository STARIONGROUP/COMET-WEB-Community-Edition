<!------------------------------------------------------------------------------
// Copyright (c) 2023-2024 Starion Group S.A.
//
//   Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine, Nabil Abbar
//
//   This file is part of CDP4-COMET WEB Community Edition
//   The CDP4-COMET WEB Community Edition is the Starion Web Application implementation of ECSS-E-TM-10-25
//   Annex A and Annex C.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
------------------------------------------------------------------------------->
@namespace COMET.Web.Common.Components.ParameterTypeEditors
@using COMET.Web.Common.Extensions
@using COMET.Web.Common.ViewModels.Components.ParameterEditors
@inherits DisposableComponent

@if (this.ViewModel is IEnumerationParameterTypeEditorViewModel enumerationParameterTypeEditorViewModel)
{
    @if (this.ViewModel.ParameterType.AllowMultiSelect)
    {
        <div id="@this.targetId">
            <DxTextBox NullText="-" Text="@enumerationParameterTypeEditorViewModel.SelectedEnumerationValueDefinitions.AsCommaSeparated()" CssClass="textBoxEllipsis" ReadOnly=true/>
            <div class="dropdownIcon">
                <span @onclick="@(() => enumerationParameterTypeEditorViewModel.IsOnEditMode = !enumerationParameterTypeEditorViewModel.IsOnEditMode)">
                    <i class="oi oi-caret-bottom"></i>
                </span>
            </div>
        </div>
        <DxDropDown @bind-IsOpen="@enumerationParameterTypeEditorViewModel.IsOnEditMode"
                    Width="300" AllowResize="true"
                    PositionMode="DropDownPositionMode.Bottom"
                    PositionTarget="@this.TargetIdSelector"
                    RestrictionTarget="#Navigation-DropDown-Customization"
                    CloseMode="DropDownCloseMode.Close"
                    PreventCloseOnPositionTargetClick="true"
                    HeaderVisible="false"
                    FooterVisible="true">
            <BodyTemplate>

                <DxCheckBox CheckedChanged="@((bool value) => enumerationParameterTypeEditorViewModel.OnSelectAllChanged(value))">Select All</DxCheckBox>

                <DxListBox CssClass="enumeration-parameter-type"
                           Data="enumerationParameterTypeEditorViewModel.EnumerationValueDefinitions.OrderBy(x => x.Name).Select(x => x.Name)"
                           @bind-Values="enumerationParameterTypeEditorViewModel.SelectedEnumerationValueDefinitions"
                           ReadOnly="this.ViewModel.IsReadOnly"
                           SelectionMode="ListBoxSelectionMode.Multiple"
                           ShowCheckboxes="true"/>
            </BodyTemplate>
            <FooterTextTemplate>
                <DxButton Id="confirmButton" RenderStyle="ButtonRenderStyle.Primary" Text="Ok" Click="enumerationParameterTypeEditorViewModel.OnConfirmButtonClick"/>
                <DxButton Id="cancelButton" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="enumerationParameterTypeEditorViewModel.OnCancelButtonClick"/>
            </FooterTextTemplate>
        </DxDropDown>
    }
    else
    {
        <DxComboBox CssClass="enumeration-parameter-type"
                    Data="this.ViewModel.ParameterType.ValueDefinition.OrderBy(x => x.Name).Select(x => x.Name)"
                    NullText="-"
                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"
                    Value="@(enumerationParameterTypeEditorViewModel.GetEnumerationValue())"
                    ReadOnly="this.ViewModel.IsReadOnly"
                    ValueChanged="(string value) => this.ViewModel.OnParameterValueChanged(value)"/>
    }

    <ValidationMessageComponent ValidationMessage="@(this.ViewModel.ValidationMessage)"/>
}