<!------------------------------------------------------------------------------
// Copyright (c) 2023-2024 RHEA System S.A.
//
//   Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine, Nabil Abbar
//
//   This file is part of CDP4-COMET WEB Community Edition
//   The CDP4-COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25
//   Annex A and Annex C.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
------------------------------------------------------------------------------->
@namespace COMET.Web.Common.Components.ParameterTypeEditors
@using COMET.Web.Common.Utilities
@using COMET.Web.Common.Extensions
@inherits DisposableComponent

@if (string.Equals(this.ViewModel.ParameterType.ShortName, ConstantValues.ColorShortName, StringComparison.InvariantCultureIgnoreCase))
{
    var colorValue = this.ViewModel.ValueArray[this.ViewModel.ValueArrayIndex].ParseToHexColor();
    <div class="parameter-row" id="color-section">
        <input class="margin-2" type="color" 
               id="color-picker" 
               name="color" 
               value="@colorValue" 
               readonly="@this.ViewModel.IsReadOnly"
               onchange="@((ChangeEventArgs value) => this.ViewModel.OnParameterValueChanged(value))">
        <label for="color-picker" id="color-text">Color</label>
    </div>
}
else
{
    <Tooltip MarginBottom="text-align-center" 
             Text="@this.ViewModel.ValueArray[this.ViewModel.ValueArrayIndex]">
        <DxTextBox Text="@this.ViewModel.ValueArray[this.ViewModel.ValueArrayIndex]"
                   InputCssClass="text-prameter-editor"
                   CssClass="parameter-input"
                   ReadOnly="true">
            <Buttons>
                <DxEditorButton IconCssClass="icon icon-edit"
                                Tooltip="Open Multiline editor"
                                Click="this.OpenMemoPopup" />
            </Buttons>
        </DxTextBox>
    </Tooltip>   

    @if (this.ViewModel.Parameter?.Scale != null)
    {
        <span class="content-scale">[@this.ViewModel.Parameter.Scale.ShortName]</span>
    }

    <DxPopup @bind-Visible="@this.IsOnEditMode" HeaderText="@this.ViewModel.ParameterType.Name" Shown="OnShown" Width="auto" CloseOnOutsideClick="true" MaxHeight="1000" MaxWidth="900" MinWidth="400">
        <DxMemo @ref="this.multiLineEditor"
                BindValueMode="@this.BindValueMode"
                Text="@this.ViewModel.ValueArray[this.ViewModel.ValueArrayIndex]"
                TextChanged="@((e) => this.ViewModel.OnParameterValueChanged(e))"
                NullText="Type text..."
                ReadOnly="this.ViewModel.IsReadOnly"
                CssClass="cw-480"
                Rows="5" />
    </DxPopup>
}

<ValidationMessageComponent ValidationMessage="@this.ViewModel.ValidationMessage" />
