<!------------------------------------------------------------------------------
// Copyright (c) 2023-2023 Starion Group S.A.
//
//    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine, João Rua
//
//    This file is part of COMET WEB Community Edition
//    The COMET WEB Community Edition is the Starion Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//    The COMET WEB Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Affero General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or (at your option) any later version.
//
//    The COMET WEB Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//    Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@attribute [Route(WebAppConstantValues.TabsPage)]
@using COMETwebapp.Components.Tabs
@using COMETwebapp.Utilities
@using CDP4Common.CommonData
@using DynamicData
@inherits DisposableComponent

<div style="display: flex; height: 100%;">
<div class="@($"panel-view {(this.ViewModel.CurrentTab is null ? "w-100" : "")}")">

    @if (this.ViewModel.CurrentTab is not null)
    {
            <div class="d-flex gap-2 tabs-row">

                @foreach (var tab in this.ViewModel.OpenTabs.Items.Where(x => x.ComponentType == this.ViewModel.SelectedApplication?.ComponentType && x.Panel == null))
                {
                    <TabComponent Text="@(GetTabText(tab.ObjectOfInterest))"
                                  Icon="typeof(FeatherX)"
                                  OnClick="@(() => this.OnTabClick(tab))"
                                  OnIconClick="@(() => this.OnRemoveTabClick(tab))"
                                  IsCurrent="@(tab == this.ViewModel.CurrentTab)"/>
                }

                <TabComponent Text="Open Model"
                              Icon="typeof(FeatherPlus)"
                              OnClick="@(() => this.SetOpenTabVisibility(true))"/>
            
                <DxButton Click="@(() => this.AddNewSidePanel())" Text="side"/>
            </div>
    }
    else
    {
        <div class="open-tab-box-container">
            <div class="open-tab-box">
                <OpenTab/>
            </div>
        </div>
    }

    @if (this.ViewModel.CurrentTab is not null)
    {
        <div class="template-container" id="tabs-page-content">
            <DynamicApplicationBase ViewModel="this.ViewModel.CurrentTab.ApplicationBaseViewModel"
                                    ApplicationBaseType="this.ViewModel.CurrentTab.ComponentType"
                                    CurrentThing="this.ViewModel.CurrentTab.ObjectOfInterest as Thing"/>
        </div>
    }
</div>

    @foreach (var panel in this.ViewModel.OpenTabs.Items.Where(x => x.ComponentType == this.ViewModel.SelectedApplication?.ComponentType && x.Panel is not null).GroupBy(x => x.Panel))
    {
        <div class="panel-view">
            @if (panel.Key is not null)
            {
                <div class="d-flex gap-2 tabs-row">

                    @foreach (var tab in this.ViewModel.OpenTabs.Items.Where(x => x.ComponentType == this.ViewModel.SelectedApplication?.ComponentType && x.Panel == panel.Key))
                    {
                        <TabComponent Text="@(GetTabText(tab.ObjectOfInterest))"
                                      Icon="typeof(FeatherX)"
                                      OnClick="@(() => panel.Key.CurrentTab = tab)"
                                      OnIconClick="@(() => this.ViewModel.OpenTabs.Remove(tab))"
                                      IsCurrent="@(tab == panel.Key.CurrentTab)" />
                    }

                    <TabComponent Text="Open Model"
                                  Icon="typeof(FeatherPlus)"
                                  OnClick="@(() => this.SetOpenTabVisibility(true))"/>
                </div>
            }
            

            @if (panel.Key is not null)
            {
                <div class="template-container" id="tabs-page-content">
                    <DynamicApplicationBase ViewModel="panel.Key.CurrentTab.ApplicationBaseViewModel"
                                            ApplicationBaseType="panel.Key.CurrentTab.ComponentType"
                                            CurrentThing="panel.Key.CurrentTab.ObjectOfInterest as Thing" />
                </div>
            }

        </div>
    }


    <DxPopup @bind-Visible="@(this.IsOpenTabVisible)"
             ShowHeader="false"
             ShowCloseButton="true"
             CloseOnOutsideClick="true"
             CloseOnEscape="true">
        <OpenTab OnCancel="@(() => this.SetOpenTabVisibility(false))"
                 OnTabOpened="@(() => this.SetOpenTabVisibility(false))"/>
    </DxPopup>
</div>