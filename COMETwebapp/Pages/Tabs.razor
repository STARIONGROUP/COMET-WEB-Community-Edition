<!------------------------------------------------------------------------------
// Copyright (c) 2023-2023 Starion Group S.A.
//
//    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine, João Rua
//
//    This file is part of COMET WEB Community Edition
//    The COMET WEB Community Edition is the Starion Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//    The COMET WEB Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Affero General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or (at your option) any later version.
//
//    The COMET WEB Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//    Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@attribute [Route(WebAppConstantValues.TabsPage)]
@using COMETwebapp.Components.Tabs
@using COMETwebapp.Utilities
@inherits DisposableComponent

<div style="display: flex; height: 100%;">
    @if (this.ViewModel.MainPanel.CurrentTab is not null)
    {
        <TabsPanelComponent Panel="@(this.ViewModel.MainPanel)"
                            ViewModel="@(this.ViewModel)"
                            OnTabClick="@(tuple => OnTabClick(tuple.Item1, tuple.Item2))"
                            OnCreateTabForModel="@(tab => this.OnCreateTabForModel(tab))"
                            OnRemoveTabClick="@(tab => OnRemoveTabClick(tab, this.ViewModel.MainPanel))"
                            OnOpenTabClick="@(() => this.OnOpenTabClick(this.ViewModel.MainPanel))"
                            IsSidePanelAvailable="@(this.ViewModel.SidePanel.OpenTabs.Count == 0)"/>

        @if (this.ViewModel.SidePanel.CurrentTab is not null)
        {
            <TabsPanelComponent Panel="@(this.ViewModel.SidePanel)"
                                ViewModel="@(this.ViewModel)"
                                OnTabClick="@(tuple => OnTabClick(tuple.Item1, tuple.Item2))"
                                OnCreateTabForModel="@(tab => this.OnCreateTabForModel(tab))"
                                OnRemoveTabClick="@(tab => OnRemoveTabClick(tab, this.ViewModel.SidePanel))"
                                OnOpenTabClick="@(() => this.OnOpenTabClick(this.ViewModel.SidePanel))" />
        }
    }
    else
    {
        <div class="open-tab-box-container">
            <div class="open-tab-box">
                <OpenTab Panel="@(this.ViewModel.MainPanel)"/>
            </div>
        </div>
    }
</div>

<DxPopup @bind-Visible="@(this.IsOpenTabVisible)"
         ShowHeader="false"
         ShowCloseButton="true"
         CloseOnOutsideClick="true"
         CloseOnEscape="true"
         Closed="@(() => this.ResetOpenTabPopup())">
    <OpenTab OnCancel="@(() => this.SetOpenTabVisibility(false))"
             OnTabOpened="@(() => this.SetOpenTabVisibility(false))"
             Panel="@(this.SelectedPanel)"
             ModelId="this.ModelId"
             IterationId="this.IterationId"
             DomainId="this.DomainId"/>
</DxPopup>
