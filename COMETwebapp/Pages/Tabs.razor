<!------------------------------------------------------------------------------
// Copyright (c) 2023-2023 Starion Group S.A.
//
//    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine, João Rua
//
//    This file is part of COMET WEB Community Edition
//    The COMET WEB Community Edition is the Starion Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//    The COMET WEB Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Affero General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or (at your option) any later version.
//
//    The COMET WEB Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//    Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@attribute [Route(WebAppConstantValues.TabsPage)]
@using COMETwebapp.Components.Tabs
@using COMETwebapp.Utilities
@using CDP4Common.CommonData
@inherits DisposableComponent

@if (this.ViewModel.CurrentTab is not null)
{
    <div class="pb-3 mb-3 d-flex gap-2" style="border-bottom: solid 1px #e5e5e5;">

        @foreach (var tab in this.ViewModel.OpenTabs.Items.Where(x => x.ComponentType == this.ViewModel.SelectedApplication?.ComponentType))
        {
            <TabComponent Text="@(GetTabText(tab.ObjectOfInterest))"
                          Icon="typeof(FeatherX)"
                          OnClick="@(() => this.OnTabClick(tab))"
                          OnIconClick="@(() => this.OnRemoveTabClick(tab))"
                          IsCurrent="@(tab == this.ViewModel.CurrentTab)"/>
        }

        <TabComponent Text="Open Model"
                      Icon="typeof(FeatherPlus)"
                      OnClick="@(() => this.SetOpenTabVisibility(true))"/>
    </div>
}
else
{
    <div style="display: flex;justify-content: center;align-items: center;height: 90vh;">
        <div style="width: 500px; align-items: center; display: flex; box-shadow: 0px 2px 6px 0px rgb(0 0 0 / 12%);">
            <OpenTab/>
        </div>
    </div>
}

<DxPopup @bind-Visible="@(this.IsOpenTabVisible)"
         ShowHeader="false"
         ShowCloseButton="true"
         CloseOnOutsideClick="true"
         CloseOnEscape="true">
    <OpenTab OnCancel="@(() => this.SetOpenTabVisibility(false))"
             OnTabOpened="@(() => this.SetOpenTabVisibility(false))"/>
</DxPopup>

@if (this.ViewModel.CurrentTab is not null)
{
    <DynamicApplicationBase ViewModel="this.ViewModel.CurrentTab.ApplicationBaseViewModel"
                            ApplicationBaseType="this.ViewModel.CurrentTab.ComponentType"
                            CurrentThing="this.ViewModel.CurrentTab.ObjectOfInterest as Thing"/>
}