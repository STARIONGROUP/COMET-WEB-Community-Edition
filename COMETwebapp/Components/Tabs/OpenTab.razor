<!------------------------------------------------------------------------------
// Copyright (c) 2023-2024 Starion Group S.A.
//
//   Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine, João Rua
//
//   This file is part of CDP4-COMET WEB Community Edition
//   The CDP4-COMET WEB Community Edition is the Starion Web Application implementation of ECSS-E-TM-10-25
//   Annex A and Annex C.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
------------------------------------------------------------------------------->
@namespace COMETwebapp.Components.Tabs
@using COMETwebapp.Model
@using COMET.Web.Common.Model
@inherits OpenModel

<DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="py-5 px-4">
    <DxFormLayoutItem ColSpanLg="12">
        <div style="display:flex; flex-direction: column; align-items: center;">
            <FeatherSmile Size="42"
                          Color="var(--colors-primary-500)"
                          StrokeWidth="1.8f"/>
            <h5 class="font-weight-bold mt-1 text-primary">You have no model selected</h5>
            <span style="color: var(--colors-gray-600);">Select a model to start working on it</span>
        </div>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="View" ColSpanLg="12">
        <DxComboBox Id="view-selection"
                    Data="@(Applications.ExistingApplications.OfType<TabbedApplication>())"
                    TextFieldName="@nameof(Application.Name)"
                    @bind-Value="@(this.ViewModel.SelectedApplication)"
                    NullText="Select a View"/>
    </DxFormLayoutItem>

    @if (this.IsEngineeringModelView || this.IsIterationView || this.ViewModel.SelectedApplication is null)
    {
        <DxFormLayoutItem Caption="Model" ColSpanLg="12">
            <DxComboBox Id="model-selection"
                        Data="@(this.ViewModel.EngineeringModelSetups)"
                        TextFieldName="@nameof(EngineeringModelSetup.Name)"
                        @bind-Value="@(this.ViewModel.SelectedEngineeringModel)"
                        NullText="Select an Engineering Model"
                        Enabled="@(this.ModelId == Guid.Empty)" />
        </DxFormLayoutItem>

        <DxFormLayoutItem Caption="Domain" ColSpanLg="12">
            <DxComboBox Id="domain-selection"
                        Data="@(this.ViewModel.AvailablesDomainOfExpertises)"
                        TextFieldName="@nameof(DomainOfExpertise.Name)"
                        @bind-Value="@(this.ViewModel.SelectedDomainOfExpertise)"
                        NullText="Select a Domain of Expertise"
                        Enabled="@(this.DomainId == Guid.Empty)">
                <ItemTemplate Context="ctx">
                    @if (this.ViewModel.IsCurrentModelOpened)
                    {
                        <span class="@(this.ViewModel.SelectedIterationDomainOfExpertise == ctx ? "font-weight-bold" : "")">@(ctx.Name)</span>
                    }
                    else
                    {
                        <span>@(ctx.Name)</span>
                    }
                </ItemTemplate>
            </DxComboBox>
        </DxFormLayoutItem>

        @if (this.IsIterationView)
        {
            <DxFormLayoutItem Caption="Iteration" ColSpanLg="12">
                <DxComboBox Id="iteration-selection"
                            Data="@(this.ViewModel.AvailableIterationSetups)"
                            TextFieldName="@nameof(IterationData.IterationName)"
                            @bind-Value="@(this.ViewModel.SelectedIterationSetup)"
                            NullText="Select an Iteration"
                            ReadOnly="@(this.ViewModel.IsCurrentModelOpened)"
                            Enabled="@(this.IterationId == Guid.Empty)" />
            </DxFormLayoutItem>
        }

        @if (this.ViewModel.IsCurrentModelOpened)
        {
            <DxFormLayoutItem ColSpanLg="12">
                <sub class="my-1">Model already opened</sub>
            </DxFormLayoutItem>
        }
    }

    <DxFormLayoutItem ColSpanLg="12">
        <DxButton Id="opentab__button"
                  CssClass="btn btn-connect w-100 lh-lg mt-3"
                  Text="@($"{this.ButtonText} Tab")"
                  Click="@(this.OpenModelAndNavigateToView)"
                  Enabled="@(this.ButtonEnabled)"/>

        @if (this.OnCancel is not null)
        {
            <DxButton Id="closetab__button"
                      CssClass="btn btn-connect w-100 lh-lg mt-2"
                      Text="Close"
                      Click="@(() => this.OnCancel?.Invoke())"
                      RenderStyleMode="ButtonRenderStyleMode.Outline"/>
        }
    </DxFormLayoutItem>
</DxFormLayout>
