<!------------------------------------------------------------------------------
// Copyright (c) 2023-2024 Starion Group S.A.
//
//    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine, João Rua
//
//    This file is part of CDP4-COMET WEB Community Edition
//    The CDP4-COMET WEB Community Edition is the Starion Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//    The CDP4-COMET WEB Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Affero General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or (at your option) any later version.
//
//    The CDP4-COMET WEB Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//    Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using COMETwebapp.Model
@using CDP4Common.CommonData
@inherits DisposableComponent

<div class="panel-view @(this.CssClass)">
    @if (this.Handler.CurrentTab is not null)
    {
        <div class="d-flex tabs-row justify-content-between">
            <div class="d-flex gap-2">
                @foreach (var tab in this.Tabs)
                {
                    <TabComponent Text="@(GetTabText(tab))"
                                  Caption="@(this.GetCaptionText(tab.ObjectOfInterest))"
                                  Icon="typeof(FeatherX)"
                                  CustomOptionIcon="@(typeof(FeatherCopy))"
                                  CustomOptionIconVisible="@(tab.ObjectOfInterest != null)"
                                  OnClick="@(() => this.OnTabClick.InvokeAsync((tab, this.Handler)))"
                                  OnIconClick="@(() => this.OnRemoveTabClick.InvokeAsync(tab))"
                                  OnCustomOptionIconClick="@(() => this.OnCreateTabForModel.InvokeAsync(tab))"
                                  IsCurrent="@(tab == this.Handler.CurrentTab)"
                                  ApplicationIcon="@(Applications.ExistingApplications.OfType<TabbedApplication>().First(x => x.ComponentType == tab.ComponentType).IconType)"
                                  @key="tab"/>
                }

                <TabComponent Text="Select Model"
                              Icon="typeof(FeatherPlus)"
                              OnClick="@(() => this.OnOpenTabClick.Invoke())"/>
            </div>
            @if (this.IsSidePanelAvailable)
            {
                <DxButton Click="@(() => this.AddSidePanel())"
                          RenderStyle="ButtonRenderStyle.None"
                          Id="new-side-panel-button"
                          CssClass="ml-auto p-0">
                    <FeatherColumns Size="30"
                                    Color="currentColor"
                                    StrokeWidth="1.8f"/>
                </DxButton>
            }

        </div>
        <div class="template-container" id="tabs-page-content">
            <DynamicApplicationBase ViewModel="this.Handler.CurrentTab.ApplicationBaseViewModel"
                                    ApplicationBaseType="this.Handler.CurrentTab.ComponentType"
                                    CurrentThing="this.Handler.CurrentTab.ObjectOfInterest as Thing"/>
        </div>
    }
</div>
