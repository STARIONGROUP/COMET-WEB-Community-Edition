<!------------------------------------------------------------------------------
// Copyright (c) 2023-2024 Starion Group S.A.
//
//    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine, João Rua
//
//    This file is part of CDP4-COMET WEB Community Edition
//    The CDP4-COMET WEB Community Edition is the Starion Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//    The CDP4-COMET WEB Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Affero General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or (at your option) any later version.
//
//    The CDP4-COMET WEB Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//    Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@using COMETwebapp.Components.ModelEditor
@using COMETwebapp.ViewModels.Components.MultiModelEditor.Rows
@inherits SingleIterationApplicationBase<COMETwebapp.ViewModels.Components.MultiModelEditor.IMultiModelEditorViewModel>;

<LoadingComponent IsVisible="@this.ViewModel.IsLoading">
    <ValidationMessageComponent ValidationMessage="@(this.ErrorMessage)" />
    <div class="selected-data-item-page">
        <div class="selected-data-item-table d-flex" style="flex: 1 1 58%!important;">
            <div>
                <h4>Source Model</h4>
                <ElementDefinitionTree 
                    @ref="this.SourceTree" 
                    InitialIteration="@this.ViewModel.CurrentThing"
                    SelectionChanged="model => 
                        { 
                            if (model != null) 
                            { 
                                this.TargetTree.ClearSelection(); 
                            } 
                            this.OnElementSelected(model);
                        }"
                    AllowDrag="true"
                    AllowDrop="true"
                    OnCalculateDropIsAllowed="@(async x => await this.SetDropIsAllowedAsync(x))"
                    OnDragEnter="@(async x => await this.OnDragEnterAsync(x))"
                    OnDragLeave="@(async x => await this.OnDragLeaveAsync())"
                    OnDragStart="@(async x => await this.OnDragStartAsync(x))"
                    OnDragEnd="@(async x => await this.OnDragEndAsync())"
                    OnDrop="@(async x => await this.OnDropAsync(x))"
                    AllowNodeDrag="(_, model) => model is ElementDefinitionTreeRowViewModel"
                    IsModelSelectionEnabled="true">
                </ElementDefinitionTree>
            </div>
            <div>
                <h4>Target Model</h4>
                <ElementDefinitionTree 
                    @ref="this.TargetTree" 
                    InitialIteration="@this.ViewModel.CurrentThing"
                    SelectionChanged="model => 
                    { 
                        if (model != null) 
                        { 
                            this.SourceTree.ClearSelection(); 
                        } 
                        this.OnElementSelected(model);
                    }"
                    AllowDrag="true"
                    AllowDrop="true"
                    OnCalculateDropIsAllowed="@(async x => await this.SetDropIsAllowedAsync(x))"
                    OnDragEnter="@(async x => await this.OnDragEnterAsync(x))"
                    OnDragLeave="@(async x => await this.OnDragLeaveAsync())"
                    OnDragStart="@(async x => await this.OnDragStartAsync(x))"
                    OnDragEnd="@(async x => await this.OnDragEndAsync())"
                    OnDrop="@(async x => await this.OnDropAsync(x))"
                    AllowNodeDrag="(_, model) => model is ElementDefinitionTreeRowViewModel"
                    IsModelSelectionEnabled="false">
                </ElementDefinitionTree>
            </div>
        </div>
        <DataItemDetailsComponent IsSelected="@(this.ViewModel.SelectedElementDefinition is not null)"
                                  NotSelectedText="Select an item to view or edit"
                                  Width="100%"
                                  CssClass="model-editor-details">
            <div class="mb-2 row">
                <div class="float-end">
                    @if (this.ViewModel.SelectedElementDefinition is not null)
                    {
                        <DxButton Id="addParameter" Text="Add Parameter" IconCssClass="oi oi-plus" Click="@(this.ViewModel.OpenAddParameterPopup)"/>
                    }

                    <DxButton Id="addElementDefinition" Text="Add Element Definition" IconCssClass="oi oi-plus" Click="@this.ViewModel.OpenCreateElementDefinitionCreationPopup"/>
                </div>
            </div>
            <div style="height: 73vh!important;" class="sticky-scrollable-column justify-content-between">
                <DetailsPanelEditor ViewModel="this.ViewModel.ElementDefinitionDetailsViewModel"/>
            </div>
        </DataItemDetailsComponent>
    </div>
    <DxPopup CloseOnOutsideClick="false" HeaderText="Create Element Definition" @bind-Visible="@this.ViewModel.IsOnCreationMode" Width="40vw">
        <BodyContentTemplate>
            <ElementDefinitionCreation ViewModel="@this.ViewModel.ElementDefinitionCreationViewModel"/>
        </BodyContentTemplate>
    </DxPopup>
    
    <DxPopup CloseOnOutsideClick="false" HeaderText="Add Parameter" @bind-Visible="@this.ViewModel.IsOnAddingParameterMode" Width="40vw">
        <BodyContentTemplate>
            <AddParameter ViewModel="@this.ViewModel.AddParameterViewModel"/>
        </BodyContentTemplate>
    </DxPopup>
</LoadingComponent>
