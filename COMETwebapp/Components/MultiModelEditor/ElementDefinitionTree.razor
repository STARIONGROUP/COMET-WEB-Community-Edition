<!------------------------------------------------------------------------------
// Copyright (c) 2023-2024 Starion Group S.A.
//
//    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine, João Rua
//
//    This file is part of CDP4-COMET WEB Community Edition
//    The CDP4-COMET WEB Community Edition is the Starion Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//    The CDP4-COMET WEB Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Affero General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or (at your option) any later version.
//
//    The CDP4-COMET WEB Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//    Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using COMET.Web.Common.Model
@using COMETwebapp.ViewModels.Components.MultiModelEditor.Rows
@inject IJSRuntime JSRuntime

<div style = "height:50px;">
@if (this.IsModelSelectionEnabled)
{
    <DxComboBox TData="IterationData"
                TValue="IterationData"
                FilteringMode="DataGridFilteringMode.Contains" 
                SizeMode="SizeMode.Medium" 
                Data="@this.ViewModel.Iterations"
                TextFieldName="IterationName"
                @bind-Value="@this.ViewModel.SelectedIterationData">
    </DxComboBox>
}
else
{
    <h6>@this.ViewModel.Description</h6>
}
</div>
<p>
    <table>
        <tr>
            <td id="search-textbox" style="visibility:@(this.AllowSearch ? "block": "hidden");">
                <DxTextBox CssClass="inline-search-icon" SizeMode="SizeMode.Medium" BindValueMode="BindValueMode.OnDelayedInput" InputDelay="500" @bind-Text="this.SearchTerm" NullText="Search..." ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto">
                </DxTextBox>
            </td>
        </tr>
    </table>
</p>
<div class="drop-area-color @(this.dragOverNode == this.TreeView && this.AllowNodeDrop && this.AllowDrop ? "treeview-drag-over" : "")"
     dropzone="@(this.AllowDrop ? "move" : "")"
     ondragover="@(this.AllowDrop ? "event.preventDefault();" : "")"
     @ondragenter="@(() => this.DragEnterAsync(this.TreeView))"
     @ondragleave="@(() => this.DragLeaveAsync(this.TreeView))"
     @ondrop="@(() => this.DropAsync(null))"
     style="padding:2px;border:dotted 1px;border-radius: 5px;height:25px;@(this.AllowDrop ? "" : "visibility:hidden;")">
    Drop here to create new element...
</div>
<div class="@this.ScrollableAreaCssClass" style="overflow-y:auto;">
    <DxTreeView @ref="this.TreeView" Data="@this.ViewModel.Rows"
                FilterString="@this.SearchTerm"
                FilterMinLength="1"
                CssClass="sticky-scrollable-column"
                SelectionChanged="args => {this.SelectionChanged.InvokeAsync(args.NodeInfo?.DataItem as ElementBaseTreeRowViewModel); }"
                AllowSelectNodes="true"
                SizeMode="SizeMode.Small" 
                FilterMode="NavigationFilterMode.EntireBranch"
                AnimationType="LayoutAnimationType.None">
        <NodeTextTemplate>
            @{
                var dataItem = (ElementBaseTreeRowViewModel)context.DataItem;
                var draggable = this.AllowDrag && this.AllowNodeDrag.Invoke(this, dataItem);
                var isTopElement = dataItem is ElementDefinitionTreeRowViewModel { IsTopElement: true };
                var cssClass = isTopElement ? "font-weight-bold" : string.Empty;
            }

            <CascadingValue Name="SearchTerm" Value="this.SearchTerm">
                @if (draggable)
                {
                    <ElementDefinitionTreeItem
                        CssClass="@($"{cssClass} {(this.AllowDrop && this.dragOverNode == dataItem && this.AllowNodeDrop ? "treeview-item-drag-over" : "")}")"
                        ElementBaseTreeRowViewModel="@dataItem"
                        draggable="@(this.AllowDrag ? "true" : "false")"
                        dropzone="@(this.AllowDrop && this.dragOverNode == dataItem && this.AllowNodeDrop ? "move" : "")"
                        @ondragstart="@(async () => await this.DragStartAsync(dataItem))"
                        @ondragend="@(async () => await this.DragEndAsync(dataItem))"
                        ondragover="@(this.AllowDrop && this.dragOverNode == dataItem && this.AllowNodeDrop ? "event.preventDefault();" : "")"
                        @ondragenter="@(async () => await this.DragEnterAsync(dataItem))"
                        @ondragleave="@(async () => await this.DragLeaveAsync(dataItem))"
                        @ondrop="@(async () => await this.DropAsync(dataItem))"/>
                }
                else
                {
                    <ElementDefinitionTreeItem CssClass="@cssClass" ElementBaseTreeRowViewModel="@dataItem"/>
                }
            </CascadingValue>

        </NodeTextTemplate>
        <DataMappings>
            <DxTreeViewDataMapping Children="Rows" Text="SearchString"/>
            <DxTreeViewDataMapping Level="1" Text="SearchString" />
        </DataMappings>
    </DxTreeView>
</div>
