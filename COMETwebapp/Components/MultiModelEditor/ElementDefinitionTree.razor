<!------------------------------------------------------------------------------
// Copyright (c) 2023-2024 Starion Group S.A.
//
//    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine, João Rua
//
//    This file is part of CDP4-COMET WEB Community Edition
//    The CDP4-COMET WEB Community Edition is the Starion Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//    The CDP4-COMET WEB Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Affero General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or (at your option) any later version.
//
//    The CDP4-COMET WEB Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//    Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using COMET.Web.Common.Model
@using COMETwebapp.ViewModels.Components.MultiModelEditor.Rows
@using CDP4JsonSerializer.JsonConverter
@inject IJSRuntime JSRuntime

<div style = "height:50px">
@if (this.IsModelSelectionEnabled)
{
    <DxComboBox TData="IterationData"
                TValue="IterationData"
                FilteringMode="DataGridFilteringMode.Contains" 
                SizeMode="SizeMode.Medium" 
                Data="@this.ViewModel.Iterations"
                TextFieldName="IterationName"
                @bind-Value="@this.ViewModel.SelectedIterationData">
    </DxComboBox>
}
else
{
    <h6>@this.ViewModel.Description</h6>
}
</div>
<div class="@(this.dragOverNode == this.TreeView && this.AllowNodeDrop && this.AllowDrop ? "treeview-drag-over" : "")"
     dropzone="@(this.AllowDrop ? "move" : "")"
     ondragover="@(this.AllowDrop ? "event.preventDefault();" : "")"
     @ondragenter="@(() => this.DragEnterAsync(this.TreeView))"
     @ondragleave="@(() => this.DragLeaveAsync(this.TreeView))"
     @ondrop="@(() => this.DropAsync(null))"
     style="height:25px;width:inherit;color:cadetblue;@(this.AllowDrop ? "" : "visibility:hidden;")">
    Drop here to create new element...
</div>
<DxTreeView @ref="this.TreeView" Data="@this.ViewModel.Rows"
            CssClass="sticky-scrollable-column"
            SelectionChanged="args => { this.SelectionChanged.InvokeAsync(args.NodeInfo?.DataItem as ElementBaseTreeRowViewModel); }"
            AllowSelectNodes="true"
            SizeMode="SizeMode.Small"
            AnimationType="LayoutAnimationType.None">
    <NodeTextTemplate>
        @{
            var dataItem = (ElementBaseTreeRowViewModel)context.DataItem;
            var draggable = this.AllowDrag && this.AllowNodeDrag.Invoke(this, dataItem);
            var isTopElement = dataItem is ElementDefinitionTreeRowViewModel { IsTopElement: true };
            var style = isTopElement ? "font-weight-bold" : string.Empty;
        }

        @if (draggable)
        {
            <div class="@style @(this.AllowDrop && this.dragOverNode == dataItem && this.AllowNodeDrop ? "treeview-item-drag-over" : "")"
                 draggable="@(this.AllowDrag ? "true" : "false")"
                 dropzone="@(this.AllowDrop && this.dragOverNode == dataItem && this.AllowNodeDrop ? "move" : "")"
                 @ondragstart="@(async () => await  this.DragStartAsync(dataItem))"
                 @ondragend="@(async () => await this.DragEndAsync(dataItem))"
                 ondragover="@(this.AllowDrop && this.dragOverNode == dataItem && this.AllowNodeDrop ? "event.preventDefault();" : "")"
                 @ondragenter="@(async () => await this.DragEnterAsync(dataItem))"
                 @ondragleave="@(async () => await this.DragLeaveAsync(dataItem))"
                 @ondrop="@(async () => await this.DropAsync(dataItem))">
                @dataItem.ElementName <span>
                    <button class="starion-pill" title="Owning Domain Of Expertise: @dataItem.OwnerShortName">@dataItem.OwnerShortName</button>
                </span>
                @foreach (var categoryShortName in dataItem.ElementBase.GetAllCategories().Select(x => x.ShortName))
                {
                    <span>
                        <button class="starion-pill" style="background-color:aliceblue !important;" title="Category: @categoryShortName">@categoryShortName</button>
                    </span>
                }
            </div>
        }
        else
        {
            <div>
                @dataItem.ElementName <span>
                    <button class="starion-pill" title="Owning Domain Of Expertise: @dataItem.OwnerShortName">@dataItem.OwnerShortName</button>
                </span>
                @foreach (var categoryShortName in dataItem.ElementBase.GetAllCategories().Select(x => x.ShortName))
                {
                    <span>
                        <button class="starion-pill" style="background-color:aliceblue !important;" title="Category: @categoryShortName">@categoryShortName</button>
                    </span>
                }
            </div>
        }
    </NodeTextTemplate>
    <DataMappings>
        <DxTreeViewDataMapping Children="Rows" Text="ElementName"/>
        <DxTreeViewDataMapping Level="1" Text="ElementName" />
    </DataMappings>
</DxTreeView>
