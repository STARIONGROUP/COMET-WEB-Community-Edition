<!------------------------------------------------------------------------------
// Copyright (c) 2023-2024 Starion Group S.A.
//
//     Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine Nabil Abbar
//
//     This file is part of CDP4-COMET WEB Community Edition
//      The CDP4-COMET WEB Community Edition is the Starion Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//     The CDP4-COMET WEB Community Edition is free software; you can redistribute it and/or
//     modify it under the terms of the GNU Affero General Public
//     License as published by the Free Software Foundation; either
//     version 3 of the License, or (at your option) any later version.
//
//     The CDP4-COMET WEB Community Edition is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//     Affero General Public License for more details.
//
//     You should have received a copy of the GNU Affero General Public License
//     along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using CDP4Common.EngineeringModelData
@using CDP4Common.SiteDirectoryData
@using COMET.Web.Common.ViewModels.Components.ParameterEditors
@using COMETwebapp.ViewModels.Components.ParameterEditor
@inherits DisposableComponent

@if (this.ViewModel.IsOnEditMode)
{
    var parameters = new Dictionary<string, object>()
    {
        {"ViewModel", this.ViewModel.HaveComponentParameterTypeEditorViewModel},
        {"IsOnEditMode", true},
    };

    Type type = null;
    var headerText = string.Empty;
    var isCloseButtonAvailable = true;

    switch (this.ViewModel.HaveComponentParameterTypeEditorViewModel)
    {
        case CompoundParameterTypeEditorViewModel:
        {
            type = typeof(CompoundParameterTypeEditor);
            headerText = "Edit Compound ParameterType";
            break;
        }
        case SampledFunctionParameterTypeEditorViewModel:
        {
            type = typeof(SampledFunctionParameterTypeEditor);
            headerText = "Edit Sampled Function ParameterType";
            parameters["OnAfterCancel"] = this.closeEditor;
            parameters["OnAfterEdit"] = this.closeEditor;
            isCloseButtonAvailable = false;
            break;
        }
    }

    <DxPopup @bind-Visible="@this.ViewModel.IsOnEditMode" HeaderText="@headerText" Width="auto" CloseOnOutsideClick="false" CloseOnEscape="@isCloseButtonAvailable" 
             ShowCloseButton="@isCloseButtonAvailable">
        <DynamicComponent Type="type" Parameters="parameters"/>
    </DxPopup>
}

<div class="container-fluid table-container">
    <DxGrid @ref="this.Grid"
            CssClass="default-grid"
            ShowAllRows="true"
            Data="@this.sortedCollection"
            SelectionMode="GridSelectionMode.Single"
            AllowSelectRowByClick="false"
            ShowFilterRow="true"
            DetailExpandButtonDisplayMode="GridDetailExpandButtonDisplayMode.Auto"
            VerticalScrollBarMode="ScrollBarMode.Visible"
            HorizontalScrollBarMode="ScrollBarMode.Visible"
            CustomizeElement="this.OnCustomizeElement">
        <Columns>
            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.ElementBaseName)" GroupIndex="0" GroupInterval="GridColumnGroupInterval.Value" Caption="@("Element Name")" AllowSort="true" />
            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.ParameterName)" Caption="@("Parameter")" AllowGroup="false" AllowSort="true" />
            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.Option)" Caption="@("Option")" AllowGroup="false" AllowSort="true" />
            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.State)" Caption="@("State")" AllowGroup="false" AllowSort="true" />
            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.PublishedValue)" Caption="@("Published Value")" AllowGroup="false" AllowSort="false" />
            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.ParameterType)" Caption="@("Value")" AllowGroup="false" AllowSort="false">
                <CellDisplayTemplate>
                    @if (context.DataItem is ParameterBaseRowViewModel parameterBaseRowViewModel)
                    {
                        <ParameterTypeEditorSelector ViewModel="parameterBaseRowViewModel.ParameterTypeEditorSelectorViewModel" 
                                                     BindValueMode="BindValueMode.OnLostFocus"/>
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn>

            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.Switch)" Caption="@("Switch")" AllowGroup="false" AllowSort="true">
                <CellDisplayTemplate>
                    @if (context.DataItem is ParameterBaseRowViewModel parameterBaseRowViewModel)
                    {
                        <ParameterSwitchKindSelector ViewModel="parameterBaseRowViewModel.ParameterSwitchKindSelectorViewModel" />
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.ModelCode)" Caption="@("Model Code")" AllowGroup="false" AllowSort="true" />
            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.OwnerName)" Caption="@("Owner")" AllowGroup="false" AllowSort="true" />
        </Columns>
    </DxGrid>
</div>

