<!------------------------------------------------------------------------------
Copyright (c) 2023-2024 RHEA System S.A.
    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Antoine Théate, João Rua
    This file is part of CDP4-COMET WEB Community Edition
     The CDP4-COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
    The CDP4-COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.
    The CDP4-COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.
    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using COMETwebapp.Wrappers
@inherits SelectedDeprecatableDataItemBase<MeasurementScale, MeasurementScaleRowViewModel>

<LoadingComponent IsVisible="@this.ViewModel.IsLoading">
    <DxGrid @ref="this.Grid"
            Data="this.ViewModel.Rows.Items"
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            ShowSearchBox="true"
            ShowAllRows="true"
            SearchBoxNullText="Search for a measurement scale ..."
            PopupEditFormCssClass="pw-800"
            PopupEditFormHeaderText="Measurement Scale (UNDER DEV)"
            CustomizeElement="DisableDeprecatedThing"
            EditMode="GridEditMode.PopupEditForm"
            EditModelSaving="@(() => this.OnEditThingSaving())"
            CustomizeEditModel="this.CustomizeEditThing">
        <Columns>
            <DxGridDataColumn FieldName="@nameof(MeasurementScaleRowViewModel.Name)" MinWidth="150" />
            <DxGridDataColumn FieldName="@nameof(MeasurementScaleRowViewModel.ShortName)" MinWidth="80" SearchEnabled="false" />
            <DxGridDataColumn FieldName="@nameof(MeasurementScaleRowViewModel.Type)" Caption="Type" MinWidth="80" SearchEnabled="false" />
            <DxGridDataColumn FieldName="@nameof(MeasurementScaleRowViewModel.NumberSet)" Caption="Number Set" MinWidth="80" SearchEnabled="false" />
            <DxGridDataColumn FieldName="@nameof(MeasurementScaleRowViewModel.Unit)" Caption="Unit" MinWidth="80" SearchEnabled="false" />
            <DxGridDataColumn FieldName="@nameof(MeasurementScaleRowViewModel.ContainerName)" Caption="Container RDL" MinWidth="80" SearchEnabled="false" />
            <DxGridDataColumn FieldName="@nameof(MeasurementScaleRowViewModel.IsDeprecated)" UnboundType="GridUnboundColumnType.Boolean" Visible="false" Caption="Is Deprecated" MinWidth="80" SearchEnabled="false" />
            <DxGridCommandColumn Width="200px" EditButtonVisible="false">
                <HeaderTemplate>
                    <DxButton Id="addMeasurementScaleButton" Text="Add Measurement Scale" IconCssClass="oi oi-plus" Click="() => this.Grid.StartEditNewRowAsync()"/>
                </HeaderTemplate>
                <CellDisplayTemplate>
                    @{
                        var row = (MeasurementScaleRowViewModel)context.DataItem;

                        <DxButton Id="editScaleButton" Text="Edit" Click="@(() => this.Grid.StartEditRowAsync(context.VisibleIndex))" Enabled="@(row.IsAllowedToWrite)" />
                        <DxButton Id="@(row.IsDeprecated ? "undeprecateButton" : "deprecateButton")"
                                  Text="@(row.IsDeprecated ? "Un-deprecate" : "Deprecate")"
                                  Click="() => this.ViewModel.OnDeprecateUnDeprecateButtonClick(row)" 
                                  Enabled="@(row.IsAllowedToWrite)" />
                    }
                </CellDisplayTemplate>
            </DxGridCommandColumn>
        </Columns>
        
        <EditFormTemplate Context="EditFormContext">
            <EditForm Context="editFormContext" Model="@(this.ViewModel.Thing)" OnValidSubmit="@(this.Grid.SaveChangesAsync)">
                <FluentValidationValidator />
                <DxFormLayout CssClass="w-100">
                    <DxFormLayoutTabPages>
                        <DxFormLayoutTabPage Caption="Basic">
                            @if (this.ShouldCreateThing)
                            {
                                <DxFormLayoutItem Caption="Measurement type:" ColSpanMd="10">
                                    <DxComboBox Data="@(this.ViewModel.MeasurementScaleTypes)"
                                                TextFieldName="@(nameof(ClassKindWrapper.ClassKindName))"
                                                @bind-Value="@(this.ViewModel.SelectedMeasurementScaleType)"
                                                CssClass="cw-480"/>
                                </DxFormLayoutItem>
                            }

                            <DxFormLayoutItem Caption="Shortname:" ColSpanMd="10">
                                <DxTextBox @bind-Text="@this.ViewModel.Thing.ShortName"/>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Name:" ColSpanMd="10">
                                <DxTextBox @bind-Text="@this.ViewModel.Thing.Name"/>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Library:" ColSpanMd="10">
                                <DxComboBox Data="@this.ViewModel.ReferenceDataLibraries"
                                            TextFieldName="@nameof(ReferenceDataLibrary.ShortName)"
                                            @bind-Value="@this.ViewModel.SelectedReferenceDataLibrary"
                                            Enabled="@(this.ShouldCreateThing)"
                                            CssClass="cw-480"/>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Unit:" ColSpanMd="10">
                                <DxComboBox Data="@this.ViewModel.MeasurementUnits"
                                            TextFieldName="@nameof(MeasurementUnit.ShortName)"
                                            @bind-Value="@this.ViewModel.Thing.Unit"
                                            CssClass="cw-480"/>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Number set:" ColSpanMd="10">
                                <DxComboBox Data="@this.ViewModel.NumberSetKinds"
                                            @bind-Value="@this.ViewModel.Thing.NumberSet"
                                            CssClass="cw-480"/>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Maximum Permissible Value:" ColSpanMd="10">
                                <DxTextBox @bind-Text="@this.ViewModel.Thing.MaximumPermissibleValue"/>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Minimum Permissible Value:" ColSpanMd="10">
                                <DxTextBox @bind-Text="@this.ViewModel.Thing.MinimumPermissibleValue"/>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Positive Value Connotation:" ColSpanMd="10">
                                <DxTextBox @bind-Text="@this.ViewModel.Thing.PositiveValueConnotation"/>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Negative Value Connotation:" ColSpanMd="10">
                                <DxTextBox @bind-Text="@this.ViewModel.Thing.NegativeValueConnotation"/>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Minimum Inclusive:" ColSpanMd="10">
                                <DxCheckBox @bind-Checked="@this.ViewModel.Thing.IsMinimumInclusive"/>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Maximum Inclusive:" ColSpanMd="10">
                                <DxCheckBox @bind-Checked="@this.ViewModel.Thing.IsMaximumInclusive"/>
                            </DxFormLayoutItem>

                            @if (this.ViewModel.Thing is CyclicRatioScale ciclicRatioScale)
                            {

                                <DxFormLayoutItem Caption="Modulus:" ColSpanMd="10">
                                    <DxTextBox @bind-Text="@(ciclicRatioScale.Modulus)"/>
                                </DxFormLayoutItem>
                            }

                            @if (this.ViewModel.Thing is OrdinalScale ordinalScale)
                            {

                                <DxFormLayoutItem Caption="Use Shortname Values:" ColSpanMd="10">
                                    <DxCheckBox @bind-Checked="@(ordinalScale.UseShortNameValues)"/>
                                </DxFormLayoutItem>
                            }

                            <DxFormLayoutItem Caption="Deprecated:" ColSpanMd="10">
                                <DxCheckBox @bind-Checked="@this.ViewModel.Thing.IsDeprecated"/>
                            </DxFormLayoutItem>
                        </DxFormLayoutTabPage>
                        <DxFormLayoutTabPage Caption="Value Definition">
                            <ScaleValueDefinitionsTable @bind-ScaleValueDefinitions="@this.ViewModel.SelectedScaleValueDefinitions"/>
                        </DxFormLayoutTabPage>
                        <DxFormLayoutTabPage Caption="Mappings">
                            <MappingToReferenceScalesTable @bind-MappingToReferenceScales="@this.ViewModel.SelectedMappingToReferenceScale"
                                                           DependentScaleValueDefinitions="@this.ViewModel.SelectedScaleValueDefinitions"
                                                           ReferenceScaleValueDefinitions="@this.ViewModel.ReferenceScaleValueDefinitions"/>
                        </DxFormLayoutTabPage>
                    </DxFormLayoutTabPages>
                </DxFormLayout>
            </EditForm>
        </EditFormTemplate>

    </DxGrid>
</LoadingComponent>

<DxPopup @bind-Visible="@this.ViewModel.IsOnDeprecationMode" HeaderText="Please confirm" Width="auto" CloseOnOutsideClick="false">
    @this.ViewModel.PopupDialog
    <div class="dxbl-grid-confirm-dialog-buttons">
        <DxButton Text="Cancel " RenderStyle="ButtonRenderStyle.Success" Click="@this.ViewModel.OnCancelPopupButtonClick" />
        <DxButton Text="Confirm" RenderStyle="ButtonRenderStyle.Danger" Click="@this.ViewModel.OnConfirmPopupButtonClick" />
    </div>
</DxPopup>