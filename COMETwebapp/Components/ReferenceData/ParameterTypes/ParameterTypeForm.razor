<!------------------------------------------------------------------------------
Copyright (c) 2024 Starion Group S.A.

    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine, João Rua

    This file is part of COMET WEB Community Edition
    The COMET WEB Community Edition is the Starion Group Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
------------------------------------------------------------------------------->
@using COMETwebapp.Wrappers
@inherits SelectedDataItemForm

<EditForm Context="editFormContext" Model="@(this.ViewModel.CurrentThing)" OnValidSubmit="@(this.OnValidSubmit)">
    <FluentValidationValidator/>
    <DxFormLayout CssClass="w-100">
        <DxFormLayoutTabPages>
            <DxFormLayoutTabPage Caption="Basic">
                @if (this.ShouldCreate)
                {
                    <DxFormLayoutItem Caption="Parameter type:" ColSpanMd="12">
                        <DxComboBox Data="@(this.ViewModel.ParameterTypes)"
                                    TextFieldName="@(nameof(ClassKindWrapper.ClassKindName))"
                                    @bind-Value="@(this.ViewModel.SelectedParameterType)"
                                    CssClass="cw-480"/>
                    </DxFormLayoutItem>
                }

                <DxFormLayoutItem Caption="Shortname:" ColSpanMd="12">
                    <DxTextBox @bind-Text="@(this.ViewModel.CurrentThing.ShortName)"/>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Name:" ColSpanMd="12">
                    <DxTextBox @bind-Text="@(this.ViewModel.CurrentThing.Name)"/>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Symbol:" ColSpanMd="12">
                    <DxTextBox @bind-Text="@(this.ViewModel.CurrentThing.Symbol)"/>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Library:" ColSpanMd="12">
                    <DxComboBox Data="@(this.ViewModel.ReferenceDataLibraries)"
                                TextFieldName="@nameof(ReferenceDataLibrary.ShortName)"
                                @bind-Value="@(this.ViewModel.SelectedReferenceDataLibrary)"
                                Enabled="@(this.ShouldCreate)"
                                CssClass="cw-480"/>
                </DxFormLayoutItem>

                @if (this.ViewModel.CurrentThing is EnumerationParameterType enumerationParameterType)
                {
                    <DxFormLayoutItem Caption="Multi select:" ColSpanMd="12" Id="multiSelect">
                        <DxCheckBox @bind-Checked="@enumerationParameterType.AllowMultiSelect"/>
                    </DxFormLayoutItem>
                }

                @if (this.ViewModel.CurrentThing is CompoundParameterType compoundParameterType)
                {
                    <DxFormLayoutItem Caption="Components:" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                        <ComponentsTable @bind-Thing="compoundParameterType"
                                         ParameterTypes="@(this.ViewModel.ExistingParameterTypes)"/>
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Is Finalized:" ColSpanMd="12">
                        <DxCheckBox @bind-Checked="@compoundParameterType.IsFinalized"/>
                    </DxFormLayoutItem>
                }

                @if (this.ViewModel.CurrentThing is ArrayParameterType arrayParameterType)
                {
                    <DxFormLayoutItem Caption="Is a Tensor:" ColSpanMd="12" Id="isTensor">
                        <DxCheckBox @bind-Checked="@arrayParameterType.IsTensor"/>
                    </DxFormLayoutItem>
                }

                @if (this.ViewModel.CurrentThing is SpecializedQuantityKind specializedQuantityKindParameterType)
                {
                    <DxFormLayoutItem Caption="General:" ColSpanMd="12">
                        <DxComboBox Data="@(this.ViewModel.ExistingParameterTypes.OfType<QuantityKind>())"
                                    TextFieldName="@nameof(QuantityKind.Name)"
                                    @bind-Value="@(specializedQuantityKindParameterType.General)"
                                    CssClass="cw-480"/>
                    </DxFormLayoutItem>

                    @if (specializedQuantityKindParameterType.General is not null)
                    {
                        <DxFormLayoutItem Caption="Generalization Scales:" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical" Id="generalizationScales">
                            <DxGrid Data="@(specializedQuantityKindParameterType.General.AllPossibleScale.Select(x => new MeasurementScaleRowViewModel(x)))"
                                    ShowAllRows="true">
                                <Columns>
                                    <DxGridDataColumn FieldName="@nameof(MeasurementScaleRowViewModel.Name)" MinWidth="80"/>
                                    <DxGridDataColumn FieldName="@nameof(MeasurementScaleRowViewModel.NumberSet)"/>
                                    <DxGridDataColumn FieldName="@nameof(MeasurementScaleRowViewModel.Unit)"/>
                                    <DxGridDataColumn FieldName="@nameof(MeasurementScaleRowViewModel.ContainerName)" Caption="RDL"/>
                                </Columns>
                            </DxGrid>
                        </DxFormLayoutItem>
                    }
                }

                @if (this.ViewModel.CurrentThing is QuantityKind quantityKindParameterType)
                {
                    @if (quantityKindParameterType is SpecializedQuantityKind { General: not null } or not SpecializedQuantityKind)
                    {
                        <DxFormLayoutItem Caption="Default Scale:" ColSpanMd="12">
                            <DxComboBox Data="@(quantityKindParameterType.AllPossibleScale)"
                                        TextFieldName="@nameof(MeasurementScale.Name)"
                                        @bind-Value="@(quantityKindParameterType.DefaultScale)"
                                        CssClass="cw-480"/>
                        </DxFormLayoutItem>
                    }

                    <DxFormLayoutItem Caption="Dimension Symbol:" ColSpanMd="12">
                        <DxTextBox @bind-Text="@(quantityKindParameterType.QuantityDimensionSymbol)"/>
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Possible Scales:" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical" Id="possibleScales">
                        <DxListBox TValue="MeasurementScale"
                                   TData="MeasurementScaleRowViewModel"
                                   Data="@(this.ViewModel.MeasurementScales)"
                                   TextFieldName="@nameof(MeasurementScale.Name)"
                                   ValueFieldName="@nameof(MeasurementScaleRowViewModel.Thing)"
                                   SelectionMode="ListBoxSelectionMode.Multiple"
                                   ShowCheckboxes="true"
                                   Values="@quantityKindParameterType.PossibleScale"
                                   ValuesChanged="@(selectedPossibleScales => quantityKindParameterType.PossibleScale = selectedPossibleScales.ToList())"
                                   ValuesExpression="@(() => quantityKindParameterType.PossibleScale)"
                                   CssClass="cw-480"
                                   style="height: 200px;">
                            <Columns>
                                <DxListEditorColumn FieldName="@nameof(MeasurementScaleRowViewModel.Name)"/>
                                <DxListEditorColumn FieldName="@nameof(MeasurementScaleRowViewModel.NumberSet)"/>
                                <DxListEditorColumn FieldName="@nameof(MeasurementScaleRowViewModel.Unit)"/>
                            </Columns>
                        </DxListBox>
                    </DxFormLayoutItem>
                }

                @if (this.ViewModel.CurrentThing is SampledFunctionParameterType sampledFunctionParameterType)
                {
                    <DxFormLayoutItem Caption="Degree of Interpolation:" ColSpanMd="12">
                        <DxSpinEdit @bind-Value="@(sampledFunctionParameterType.DegreeOfInterpolation)"/>
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Independent Parameter Types:" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                        <IndependentParameterTypeTable @bind-Thing="@(sampledFunctionParameterType)"
                                                       ParameterTypes="@(this.ViewModel.ExistingParameterTypes)"
                                                       Enabled="@(this.ShouldCreate)"/>
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Dependent Parameter Types:" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                        <DependentParameterTypeTable @bind-Thing="@(sampledFunctionParameterType)"
                                                     ParameterTypes="@(this.ViewModel.ExistingParameterTypes)"
                                                     Enabled="@(this.ShouldCreate)"/>
                    </DxFormLayoutItem>
                }

                <DxFormLayoutItem Caption="Deprecated:" ColSpanMd="12">
                    <DxCheckBox @bind-Checked="@(this.ViewModel.CurrentThing.IsDeprecated)"/>
                </DxFormLayoutItem>
            </DxFormLayoutTabPage>

            @if (this.ViewModel.CurrentThing is EnumerationParameterType enumerationParameter)
            {
                <DxFormLayoutTabPage Caption="Values">
                    <EnumerationValueDefinitionsTable @bind-Thing="enumerationParameter" />
                </DxFormLayoutTabPage>
            }

            @if (this.ViewModel.CurrentThing is DerivedQuantityKind derivedQuantityKindParameterType)
            {
                <DxFormLayoutTabPage Caption="Factors">
                    <QuantityKindFactorsTable @bind-Thing="@(derivedQuantityKindParameterType)"
                                              QuantityKindParameterTypes="@(this.ViewModel.ExistingParameterTypes.OfType<QuantityKind>())"/>
                </DxFormLayoutTabPage>
            }
        </DxFormLayoutTabPages>
    </DxFormLayout>
    <FormButtons SaveButtonEnabled="@(this.IsSaveButtonEnabled(editFormContext))"
                 OnCancel="@(this.OnCancel)"
                 ValidationMessages="@(this.MapOfValidationMessages.SelectMany(x => x.Value))"/>
</EditForm>