<!------------------------------------------------------------------------------
Copyright (c) 2024 Starion Group S.A.

    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine, João Rua

    This file is part of COMET WEB Community Edition
    The COMET WEB Community Edition is the Starion Group Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
------------------------------------------------------------------------------->
@using COMETwebapp.Wrappers
@inherits SelectedDataItemForm

<EditForm Context="editFormContext" Model="@(this.ViewModel.Thing)" OnValidSubmit="@(this.OnValidSubmit)">
    <FluentValidationValidator/>
    <DxFormLayout CssClass="w-100">
        <DxFormLayoutTabPages>
            <DxFormLayoutTabPage Caption="Basic">
                @if (this.ShouldCreate)
                {
                    <DxFormLayoutItem Caption="Measurement type:" ColSpanMd="12">
                        <DxComboBox Data="@(this.ViewModel.ParameterTypes)"
                                    TextFieldName="@(nameof(ClassKindWrapper.ClassKindName))"
                                    @bind-Value="@(this.ViewModel.SelectedParameterType)"
                                    CssClass="cw-480"/>
                    </DxFormLayoutItem>
                }

                <DxFormLayoutItem Caption="Shortname:" ColSpanMd="12">
                    <DxTextBox @bind-Text="@(this.ViewModel.Thing.ShortName)"/>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Name:" ColSpanMd="12">
                    <DxTextBox @bind-Text="@(this.ViewModel.Thing.Name)"/>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Symbol:" ColSpanMd="12">
                    <DxTextBox @bind-Text="@(this.ViewModel.Thing.Symbol)"/>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Library:" ColSpanMd="12">
                    <DxComboBox Data="@(this.ViewModel.ReferenceDataLibraries)"
                                TextFieldName="@nameof(ReferenceDataLibrary.ShortName)"
                                @bind-Value="@(this.ViewModel.SelectedReferenceDataLibrary)"
                                Enabled="@(this.ShouldCreate)"
                                CssClass="cw-480"/>
                </DxFormLayoutItem>

                @if (this.ViewModel.Thing is EnumerationParameterType enumerationParameterType)
                {
                    <DxFormLayoutItem Caption="Multi select:" ColSpanMd="12">
                        <DxCheckBox @bind-Checked="@enumerationParameterType.AllowMultiSelect"/>
                    </DxFormLayoutItem>
                }

                @if (this.ViewModel.Thing is CompoundParameterType compoundParameterType)
                {
                    <DxFormLayoutItem Caption="Components:" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                        <ComponentsTable @bind-CompoundParameterType="compoundParameterType"
                                         ParameterTypes="@(this.ViewModel.ExistingParameterTypes)"/>
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Is Finalized:" ColSpanMd="12">
                        <DxCheckBox @bind-Checked="@compoundParameterType.IsFinalized"/>
                    </DxFormLayoutItem>
                }

                @if (this.ViewModel.Thing is ArrayParameterType arrayParameterType)
                {
                    <DxFormLayoutItem Caption="Is a Tensor:" ColSpanMd="12">
                        <DxCheckBox @bind-Checked="@arrayParameterType.IsTensor"/>
                    </DxFormLayoutItem>
                }

                @if (this.ViewModel.Thing is SpecializedQuantityKind specializedQuantityKindParameterType)
                {
                    <DxFormLayoutItem Caption="General:" ColSpanMd="12">
                        <DxComboBox Data="@(this.ViewModel.ExistingParameterTypes.OfType<QuantityKind>())"
                                    TextFieldName="@nameof(QuantityKind.Name)"
                                    @bind-Value="@(specializedQuantityKindParameterType.General)"
                                    CssClass="cw-480"/>
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Generalization Scales:" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">                        
                        <DxGrid Data="@(specializedQuantityKindParameterType.General.AllPossibleScale.Select(x => new MeasurementScaleRowViewModel(x)))"
                                ShowAllRows="true">
                            <Columns>
                                <DxGridDataColumn FieldName="@nameof(MeasurementScaleRowViewModel.Name)" MinWidth="80"/>
                                <DxGridDataColumn FieldName="@nameof(MeasurementScaleRowViewModel.NumberSet)"/>
                                <DxGridDataColumn FieldName="@nameof(MeasurementScaleRowViewModel.Unit)"/>
                                <DxGridDataColumn FieldName="@nameof(MeasurementScaleRowViewModel.ContainerName)" Caption="RDL"/>
                            </Columns>
                        </DxGrid>
                    </DxFormLayoutItem>
                }

                @if (this.ViewModel.Thing is QuantityKind quantityKindParameterType)
                {
                    <DxFormLayoutItem Caption="Default Scale:" ColSpanMd="12">
                        <DxComboBox Data="@(quantityKindParameterType.AllPossibleScale)"
                                    TextFieldName="@nameof(MeasurementScale.Name)"
                                    @bind-Value="@(quantityKindParameterType.DefaultScale)"
                                    CssClass="cw-480"/>
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Dimension Symbol:" ColSpanMd="12">
                        <DxTextBox @bind-Text="@(quantityKindParameterType.QuantityDimensionSymbol)"/>
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Possible Scales:" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                        <DxListBox TValue="MeasurementScale"
                                   TData="MeasurementScaleRowViewModel"
                                   Data="@(this.ViewModel.MeasurementScales)"
                                   TextFieldName="@nameof(MeasurementScale.Name)"
                                   ValueFieldName="@nameof(MeasurementScaleRowViewModel.Thing)"
                                   SelectionMode="ListBoxSelectionMode.Multiple"
                                   ShowCheckboxes="true"
                                   Values="@quantityKindParameterType.PossibleScale"
                                   ValuesChanged="@(selectedPossibleScales => quantityKindParameterType.PossibleScale = selectedPossibleScales.ToList())"
                                   ValuesExpression="@(() => quantityKindParameterType.PossibleScale)"
                                   CssClass="cw-480"
                                   style="height: 200px;">
                            <Columns>
                                <DxListEditorColumn FieldName="@nameof(MeasurementScaleRowViewModel.Name)"/>
                                <DxListEditorColumn FieldName="@nameof(MeasurementScaleRowViewModel.NumberSet)"/>
                                <DxListEditorColumn FieldName="@nameof(MeasurementScaleRowViewModel.Unit)"/>
                            </Columns>
                        </DxListBox>
                    </DxFormLayoutItem>
                }

                <DxFormLayoutItem Caption="Deprecated:" ColSpanMd="12">
                    <DxCheckBox @bind-Checked="@(this.ViewModel.Thing.IsDeprecated)"/>
                </DxFormLayoutItem>
            </DxFormLayoutTabPage>

            @if (this.ViewModel.Thing is EnumerationParameterType)
            {
                <DxFormLayoutTabPage Caption="Values">
                    <EnumerationValueDefinitionsTable EnumerationValueDefinitions="@(this.ViewModel.SelectedEnumerationValueDefinitions)"
                                                      EnumerationValueDefinitionsChanged="@(this.OnEnumerationValueDefinitionsChanged)"/>
                </DxFormLayoutTabPage>
            }
            
            @if (this.ViewModel.Thing is DerivedQuantityKind derivedQuantityKindParameterType)
            {
                <DxFormLayoutTabPage Caption="Factors">
                    <QuantityKindFactorsTable @bind-DerivedQuantityKindParameterType="@(derivedQuantityKindParameterType)"
                                              QuantityKindParameterTypes="@(this.ViewModel.ExistingParameterTypes.OfType<QuantityKind>())" />
                </DxFormLayoutTabPage>
            }

            <DxFormLayoutTabPage Caption="Category">
                UNDER DEV
            </DxFormLayoutTabPage>
        </DxFormLayoutTabPages>
    </DxFormLayout>

    <div class="pt-3"></div>
    <ValidationSummary/>
    <div class="dxbl-grid-edit-form-buttons">

        @if (!this.ShouldCreate)
        {
            <DxButton Id="deprecateOrUndeprecateButton"
                      Click="() => this.ViewModel.OnDeprecateUnDeprecateButtonClick(this.ViewModel.Thing)">
                @(this.ViewModel.Thing.IsDeprecated ? "Un-deprecate" : "Deprecate")
            </DxButton>
        }

        <DxButton Id="saveParameterTypeButton"
                  SubmitFormOnClick="true">
            Save
        </DxButton>

        <DxButton Id="cancelParameterTypeButton"
                  Click="@(() => this.OnCancel())"
                  RenderStyle="ButtonRenderStyle.Secondary">
            Cancel
        </DxButton>
    </div>
</EditForm>