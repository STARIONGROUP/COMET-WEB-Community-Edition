<!------------------------------------------------------------------------------
// Copyright (c) 2023-2024 Starion Group S.A.
// 
//  Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft
//  
//  This file is part of CDP4-COMET WEB Community Edition
//  The CDP4-COMET WEB Community Edition is the Starion Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//  
//  The CDP4-COMET WEB Community Edition is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Affero General Public
//  License as published by the Free Software Foundation; either
//  version 3 of the License, or (at your option) any later version.
//  
//  The CDP4-COMET WEB Community Edition is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//  Affero General Public License for more details.
//  
//  You should have received a copy of the GNU Affero General Public License
//  along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using CDP4Common.SiteDirectoryData;
@using COMETwebapp.ViewModels.Components.SubscriptionDashboard.Rows
@using CDP4Common.EngineeringModelData
@using CDP4Common.CommonData
@using CDP4Common.Types
@inherits DisposableComponent

<DxPopup MaxWidth="1000" MaxHeight="800" HeaderText="Parameter Subscription Evolution" Scrollable=true ShowFooter="false" @ref="@this.parameterEvolutionPopup">
    <ParameterEvolutionSelector ParameterSubscriptionRow="this.parameterSubscriptionRow" />
</DxPopup>

@if (!this.ViewModel.Rows.Items.Any() && !this.ViewModel.ShowOnlyChangedSubscription)
{
    <div>You don't have any subscriptions.</div>
}
else
{
    @if (this.ViewModel.DidSubscriptionsChanged)
    {
        <div class="row">
            <div class="col align-self-end">
                <div>
                    <DxCheckBox InputId="filterUpdates" @bind-Checked="@this.ViewModel.ShowOnlyChangedSubscription">
                        <label class="m-left-3px color-7b8a8b" for="filterUpdates">Filter only changes</label>
                    </DxCheckBox>
                </div>
            </div>
            <div class="col align-self-center">
                <DxButton CssClass="btn btn-outline-dark width-200 padding-bottom-1 padding-top-1" Text="Validate all changes" Click="@this.ViewModel.ValidateAllChanges"/>
            </div>
        </div>
    }
    <DxGrid Data="@this.ViewModel.Rows.Items" ShowAllRows="true">
        <Columns>
            <DxGridDataColumn Caption="Element" FieldName="@nameof(ParameterSubscriptionRowViewModel.ElementName)" GroupIndex="0"/>
            <DxGridDataColumn Caption="Parameter" FieldName="@nameof(ParameterSubscriptionRowViewModel.ParameterName)"/>
            <DxGridDataColumn Caption="Option" FieldName="@nameof(ParameterSubscriptionRowViewModel.OptionName)"/>
            <DxGridDataColumn Caption="State" FieldName="@nameof(ParameterSubscriptionRowViewModel.StateName)"/>
            <DxGridDataColumn Caption="Parameter Subscription Value" FieldName="@nameof(ParameterSubscriptionRowViewModel.SubscriptionValueSet)" AllowSort="false">
                <CellDisplayTemplate>
                    @{
                        var row = (ParameterSubscriptionRowViewModel)context.DataItem;
                        var parameterType = row.Parameter.ParameterType;
                        var scale = row.Parameter.Scale;
                        var valueSet = (ParameterSubscriptionValueSet)context.Value;
                        var valueArray = valueSet.Computed;
                    }
                    <ValueArrayDetails ParameterType="@parameterType" Scale="@scale" Value="@valueArray"/>
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn Caption="Changes History" FieldName="@nameof(ParameterSubscriptionRowViewModel.Changes)">
                <CellDisplayTemplate>
                    @{
                        var revisions = (Dictionary<int, ValueArray<string>>)context.Value;

                        if (revisions.Count >= 2)
                        {
                            var row = (ParameterSubscriptionRowViewModel)context.DataItem;
                            <DxButton Text="More" Click="@(() => this.ShowEvolution(row))"/>
                        }
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn>
        </Columns>
    </DxGrid>
}
