<!------------------------------------------------------------------------------
Copyright (c) 2023-2024 Starion Group S.A.
    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Antoine Théate, João Rua
    This file is part of CDP4-COMET WEB Community Edition
     The CDP4-COMET WEB Community Edition is the Starion Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
    The CDP4-COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.
    The CDP4-COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.
    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@inherits SelectedDataItemBase<DomainOfExpertise, DomainOfExpertiseRowViewModel>

<DxGrid @ref="this.Grid"
        Data="this.EngineeringModelSetup.ActiveDomain.OrderBy(x => x.Name, StringComparer.InvariantCultureIgnoreCase)"
        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
        ShowSearchBox="true"
        ShowAllRows="true"
        SearchBoxNullText="Search for an active domain...">
    <ToolbarTemplate>
        <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
            <DxToolbarItem Text="Edit Active Domains"
                           Click="() => this.SetEditPopupVisibility(true)"
                           RenderStyle="ButtonRenderStyle.Info"
                           Enabled="true"/>
        </DxToolbar>
    </ToolbarTemplate>
    <Columns>
        <DxGridDataColumn FieldName="@nameof(DomainOfExpertiseRowViewModel.Name)" MinWidth="150"/>
        <DxGridDataColumn FieldName="@nameof(DomainOfExpertiseRowViewModel.ShortName)" MinWidth="80"/>
    </Columns>
</DxGrid>

<DxPopup @bind-Visible="@(this.IsOnEditMode)"
         HeaderText="Active Domains">

    <DxListBox TValue="DomainOfExpertise"
               TData="DomainOfExpertise"
               Data="@(this.DomainsOfExpertise)"
               TextFieldName="@nameof(DomainOfExpertise.Name)"
               SelectionMode="ListBoxSelectionMode.Multiple"
               ShowCheckboxes="true"
               Values="@(this.EngineeringModelSetup.ActiveDomain)"
               ValuesChanged="@(activeDomains => this.EngineeringModelSetup.ActiveDomain = activeDomains.ToList())"
               ValuesExpression="@(() => this.EngineeringModelSetup.ActiveDomain)"
               CssClass="cw-480"
               style="height: 40vh;"/>

    <div class="dxbl-grid-edit-form-buttons">
        <DxButton Id="saveActiveDomainsButton"
                  Click="@(() => this.SetEditPopupVisibility(false))">
            Save
        </DxButton>
        <DxButton Id="cancelActiveDomainsButton"
                  Click="@(() => this.SetEditPopupVisibility(false))"
                  RenderStyle="ButtonRenderStyle.Secondary">
            Cancel
        </DxButton>
    </div>
</DxPopup>