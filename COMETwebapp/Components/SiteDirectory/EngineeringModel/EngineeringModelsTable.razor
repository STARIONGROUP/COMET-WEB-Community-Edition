<!------------------------------------------------------------------------------
Copyright (c) 2023-2024 Starion Group S.A.
    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Antoine Théate, João Rua
    This file is part of CDP4-COMET WEB Community Edition
     The CDP4-COMET WEB Community Edition is the Starion Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
    The CDP4-COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.
    The CDP4-COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.
    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@inherits SelectedDataItemBase<EngineeringModelSetup, EngineeringModelRowViewModel>

<LoadingComponent IsVisible="@(this.ViewModel.IsLoading)">
    <div style="display: flex; justify-content: space-between;">
        <DxGrid @ref="this.Grid"
                Data="this.ViewModel.Rows.Items"
                ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                ShowSearchBox="true"
                SearchBoxNullText="Search for a model..."
                AllowSelectRowByClick="true"
                SelectedDataItemChanged="@(row => this.OnSelectedDataItemChanged((EngineeringModelRowViewModel)row))"
                PopupEditFormCssClass="pw-800"
                PopupEditFormHeaderText="Engineering Model"
                CustomizeEditModel="this.CustomizeEditThing"
                EditMode="GridEditMode.PopupEditForm"
                EditModelSaving="@(() => this.OnEditThingSaving())"
                EditFormButtonsVisible="false"
                PageSize="20"
                PagerNavigationMode="PagerNavigationMode.Auto"
                PageSizeSelectorVisible="true"
                PageSizeSelectorItems="@(new[] { 20, 35, 50 })"
                PageSizeSelectorAllRowsItemVisible="true"
                CssClass="d-inline height-fit-content">
            <Columns>
                <DxGridDataColumn FieldName="@nameof(EngineeringModelRowViewModel.Name)" MinWidth="150"/>
                <DxGridDataColumn FieldName="@nameof(EngineeringModelRowViewModel.ShortName)" MinWidth="80"/>
                <DxGridDataColumn FieldName="@nameof(EngineeringModelRowViewModel.Phase)" MinWidth="80" SearchEnabled="false"/>
                <DxGridDataColumn FieldName="@nameof(EngineeringModelRowViewModel.Kind)" MinWidth="80" SearchEnabled="false"/>
                <DxGridCommandColumn Width="150px" EditButtonVisible="false">
                    <HeaderTemplate>
                        <DxButton Id="addEngineeringModelButton" Text="Add Model" IconCssClass="oi oi-plus" Click="() => this.Grid.StartEditNewRowAsync()"/>
                    </HeaderTemplate>
                    <CellDisplayTemplate>
                        @{
                            var row = (EngineeringModelRowViewModel)context.DataItem;

                            <DxButton Id="deleteEngineeringModelButton"
                                      Text="Delete"
                                      Click="() => this.ViewModel.OnDeleteButtonClick(row)"
                                      Enabled="@(row.IsAllowedToWrite)"/>
                        }
                    </CellDisplayTemplate>
                </DxGridCommandColumn>
            </Columns>

            <EditFormTemplate Context="EditFormContext">
                <DxFormLayout CssClass="w-100">                    
                    <DxFormLayoutTabPages>

                        <DxFormLayoutTabPage Caption="Basic">
                            <DxFormLayoutItem Caption="Shortname:" ColSpanMd="10">
                                <DxTextBox @bind-Text="@(this.ViewModel.CurrentThing.ShortName)"/>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Name:" ColSpanMd="10">
                                <DxTextBox @bind-Text="@(this.ViewModel.CurrentThing.Name)"/>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Source Model:" ColSpanMd="10">
                                <DxComboBox Data="@this.ViewModel.EngineeringModels"
                                            TextFieldName="@nameof(EngineeringModelSetup.Name)"
                                            @bind-Value="@this.ViewModel.SelectedSourceModel"
                                            CssClass="cw-480"
                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Model Kind:" ColSpanMd="10">
                                <DxComboBox Data="@this.ViewModel.ModelKinds"
                                            @bind-Value="@this.ViewModel.CurrentThing.Kind"
                                            CssClass="cw-480"/>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Study Phase:" ColSpanMd="10">
                                <DxComboBox Data="@this.ViewModel.StudyPhases"
                                            @bind-Value="@this.ViewModel.CurrentThing.StudyPhase"
                                            CssClass="cw-480"/>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Site RDL:" ColSpanMd="10">
                                <DxComboBox Data="@this.ViewModel.SiteRdls"
                                            TextFieldName="@nameof(ModelReferenceDataLibrary.Name)"
                                            @bind-Value="@this.ViewModel.SelectedSiteRdl"
                                            CssClass="cw-480"
                                            Enabled="@(!this.IsSourceModelSelected)"/>
                            </DxFormLayoutItem>
                        </DxFormLayoutTabPage>

                        <DxFormLayoutTabPage Caption="Active Domain" 
                                             Visible="@(!this.IsSourceModelSelected)">
                            <DxFormLayoutItem ColSpanMd="12">
                                <DxListBox TValue="DomainOfExpertise"
                                           TData="DomainOfExpertise"
                                           Data="@this.ViewModel.DomainsOfExpertise"
                                           TextFieldName="@nameof(DomainOfExpertise.Name)"
                                           SelectionMode="ListBoxSelectionMode.Multiple"
                                           ShowCheckboxes="true"
                                           @bind-Values="@this.ViewModel.SelectedActiveDomains"
                                           style="height: 40vh;"/>
                            </DxFormLayoutItem>
                        </DxFormLayoutTabPage>

                        <DxFormLayoutTabPage Caption="Organizations" 
                                             Visible="@(!this.IsSourceModelSelected)">
                            <DxFormLayoutItem Caption="Participating Organizations" 
                                              CaptionPosition="CaptionPosition.Vertical"
                                              ColSpanMd="12">
                                <DxListBox TValue="Organization"
                                           TData="Organization"
                                           Data="@this.ViewModel.Organizations"
                                           TextFieldName="@nameof(Organization.Name)"
                                           SelectionMode="ListBoxSelectionMode.Multiple"
                                           ShowCheckboxes="true"
                                           @bind-Values="@this.ViewModel.SelectedOrganizations"
                                           CssClass="cw-480"
                                           style="height: 30vh;"/>
                            </DxFormLayoutItem>
                            
                            <DxFormLayoutItem Caption="Model Admin Organization:" ColSpanMd="10">
                                <DxComboBox Data="@this.ViewModel.SelectedOrganizations"
                                            TextFieldName="@nameof(Organization.Name)"
                                            @bind-Value="@this.ViewModel.SelectedModelAdminOrganization"
                                            CssClass="cw-480"
                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                            </DxFormLayoutItem>

                        </DxFormLayoutTabPage>

                    </DxFormLayoutTabPages>
                </DxFormLayout>
                <div class="pt-3"></div>
                <ValidationSummary/>
                <div class="dxbl-grid-edit-form-buttons">
                    <DxButton Id="saveEngineeringModelButton" 
                              Click="@this.SetSelectedValuesAndSubmit">
                        Save
                    </DxButton>
                    <DxButton Id="cancelEngineeringModelButton" 
                              Click="this.Grid.CancelEditAsync"
                              RenderStyle="ButtonRenderStyle.Secondary">
                        Cancel
                    </DxButton>
                </div>
            </EditFormTemplate>

            <CustomValidators>
                <FluentValidationValidator/>
            </CustomValidators>

        </DxGrid>
        
        <DataItemDetailsComponent IsSelected="@this.IsOnEditMode">
            <DxToolbar ItemClick="@this.OnDetailsItemClick">
                <Items>
                    @foreach (var mappedValue in this.mapOfComponentsAndNames)
                    {
                        <DxToolbarItem @key="@(mappedValue.Value)"
                                       Name="@(mappedValue.Value)" 
                                       Text="@(mappedValue.Value)" 
                                       Tooltip="@(mappedValue.Value)"
                                       RenderStyle="@(mappedValue.Key == this.SelectedComponent ? ButtonRenderStyle.Primary : ButtonRenderStyle.Secondary)" />
                    }
                </Items>
            </DxToolbar>

            @if (this.SelectedComponent != null)
            {
                <DynamicComponent Type="@this.SelectedComponent" Parameters="this.parameters"/>
            }
        </DataItemDetailsComponent>
    </div>
    <div class="pb-3"></div>
</LoadingComponent>

<DxPopup @bind-Visible="@(this.ViewModel.IsOnDeletionMode)" HeaderText="Please confirm" Width="auto" CloseOnOutsideClick="false">
    @(this.ViewModel.PopupDialog)
    <div class="dxbl-grid-confirm-dialog-buttons">
        <DxButton Text="Cancel " RenderStyle="ButtonRenderStyle.Success" Click="@(this.ViewModel.OnCancelPopupButtonClick)"/>
        <DxButton Text="Confirm" RenderStyle="ButtonRenderStyle.Danger" Click="@(this.ViewModel.OnConfirmPopupButtonClick)"/>
    </div>
</DxPopup>