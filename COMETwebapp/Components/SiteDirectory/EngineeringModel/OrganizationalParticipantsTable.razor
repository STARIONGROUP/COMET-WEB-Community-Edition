<!------------------------------------------------------------------------------
Copyright (c) 2023-2024 RHEA System S.A.
    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Antoine Théate, João Rua
    This file is part of CDP4-COMET WEB Community Edition
     The CDP4-COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
    The CDP4-COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.
    The CDP4-COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.
    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using COMETwebapp.ViewModels.Components.SiteDirectory.Rows
@using CDP4Common.SiteDirectoryData
@inherits COMETwebapp.Components.Common.SelectedDataItemBase<CDP4Common.SiteDirectoryData.OrganizationalParticipant, OrganizationalParticipantRowViewModel>

<LoadingComponent IsVisible="@(this.ViewModel.IsLoading)">
    <DxGrid @ref="this.Grid"
            Data="this.ViewModel.Rows.Items"
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            ShowSearchBox="true"
            ShowAllRows="true"
            SearchBoxNullText="Search for an organizational participant..."
            PopupEditFormCssClass="pw-800"
            PopupEditFormHeaderText="Organizational Participant (UNDER DEV)"
            CustomizeEditModel="this.CustomizeEditThing"
            EditMode="GridEditMode.PopupEditForm"
            EditModelSaving="@(() => this.OnEditThingSaving())">
        <Columns>
            <DxGridDataColumn FieldName="@nameof(OrganizationalParticipantRowViewModel.Name)" MinWidth="150" />
            <DxGridCommandColumn Width="200px" EditButtonVisible="false">
                <HeaderTemplate>
                    <DxButton Id="editOrganizationalParticipantsButton" Text="Edit Organizational Participants" IconCssClass="oi oi-plus" Click="() => this.Grid.StartEditNewRowAsync()" />
                </HeaderTemplate>
                <CellDisplayTemplate>
                    @{
                        var row = (OrganizationalParticipantRowViewModel)context.DataItem;

                        <DxButton Id="deleteOrganizationalParticipantButton"
                                  Text="Delete"
                                  Click="() => this.ViewModel.OnDeleteButtonClick(row)"
                                  Enabled="@(row.IsAllowedToWrite)"/>
                    }
                </CellDisplayTemplate>
            </DxGridCommandColumn>
        </Columns>

        <EditFormTemplate Context="EditFormContext">
            <DxFormLayout CssClass="w-100">
                
                <DxFormLayoutItem Caption="Participating Organizations:" 
                                  CaptionPosition="CaptionPosition.Vertical"
                                  ColSpanMd="12">
                    <DxListBox TValue="Organization"
                               TData="Organization"
                               Data="@this.ViewModel.Organizations"
                               TextFieldName="@nameof(Organization.Name)"
                               SelectionMode="ListBoxSelectionMode.Multiple"
                               ShowCheckboxes="true"
                               @bind-Values="@this.ViewModel.ParticipatingOrganizations"
                               CssClass="cw-480"/>
                </DxFormLayoutItem>
            </DxFormLayout>
            <ValidationSummary/>
        </EditFormTemplate>
        
        <CustomValidators>
            <FluentValidationValidator />
        </CustomValidators>

    </DxGrid>
</LoadingComponent>

<DxPopup @bind-Visible="@this.ViewModel.IsOnDeletionMode" HeaderText="Please confirm" Width="auto" CloseOnOutsideClick="false">
    @this.ViewModel.PopupDialog
    <div class="dxbl-grid-confirm-dialog-buttons">
        <DxButton Text="Cancel " RenderStyle="ButtonRenderStyle.Success" Click="@this.ViewModel.OnCancelPopupButtonClick" />
        <DxButton Text="Confirm" RenderStyle="ButtonRenderStyle.Danger" Click="@this.ViewModel.OnConfirmPopupButtonClick" />
    </div>
</DxPopup>
