<!------------------------------------------------------------------------------
Copyright (c) 2023-2024 Starion Group S.A.
    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Antoine Théate, João Rua
    This file is part of CDP4-COMET WEB Community Edition
     The CDP4-COMET WEB Community Edition is the Starion Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
    The CDP4-COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.
    The CDP4-COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.
    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using COMETwebapp.ViewModels.Components.EngineeringModel.FileStore
@inherits DisposableComponent

<DxButton Id="createFolderButton"
          Click="@(() => this.OnEditFolderClick())">
    Create Folder
</DxButton>

<DxButton Id="createFileButton"
          Click="@(() => this.OnEditFileClick())">
    Create File
</DxButton>

<DxTreeView @ref="@(this.TreeView)"
            Data="@(this.ViewModel.Structure)"
            AnimationType="LayoutAnimationType.Slide"
            style="height: 40vh; width: 100%; padding-top: 5px;"
            NodeClick="e => this.OnNodeClick(e.NodeInfo)">
    <DataMappings>
        <DxTreeViewDataMapping Children="Content"
                               Text="@nameof(FileFolderNodeViewModel.Name)"
                               IconCssClass="@nameof(FileFolderNodeViewModel.IconCssClass)"/>
    </DataMappings>
    <NodeTextTemplate Context="nodeContext">
        @{
            var row = (FileFolderNodeViewModel)nodeContext.DataItem;
        <div draggable="true"
             dropzone="move"
             ondragover="event.preventDefault();"
             @ondragstart="@(() => this.OnDragNode(row))"
             @ondrop="@(() => this.OnDropNode(row))">

            @nodeContext.Text

            @if (row.Thing is Folder)
            {
                <DxButton Id="editFolderButton"
                          IconCssClass="oi oi-pencil"
                          Click="@(() => this.OnEditFolderClick(row))"
                          SizeMode="SizeMode.Small"
                          CssClass="float-end"
                          RenderStyle="ButtonRenderStyle.Dark"/>
            }
        </div>}
    </NodeTextTemplate>
</DxTreeView>

<DxPopup @bind-Visible="@(this.IsFileFormVisibile)"
         HeaderText="File"
         CloseOnOutsideClick="false"
         Closed="@(this.OnClosedFormPopup)"
         Width="40%">
    <FileForm ViewModel="@(this.ViewModel.FileHandlerViewModel)"
              OnCanceled="@(this.OnClosedFormPopup)"
              OnSaved="@(this.OnClosedFormPopup)"
              ShouldCreate="@(this.ShouldCreateFile)"/>
</DxPopup>

<DxPopup @bind-Visible="@(this.IsFolderFormVisibile)"
         HeaderText="Folder"
         CloseOnOutsideClick="false"
         Closed="@(this.OnClosedFormPopup)"
         Width="40%">
    <FolderForm ViewModel="@(this.ViewModel.FolderHandlerViewModel)"
                OnCanceled="@(this.OnClosedFormPopup)"
                OnSaved="@(this.OnClosedFormPopup)"
                ShouldCreate="@(this.ShouldCreateFolder)"/>
</DxPopup>