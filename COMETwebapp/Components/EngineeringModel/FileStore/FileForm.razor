<!------------------------------------------------------------------------------
Copyright (c) 2023-2024 Starion Group S.A.
    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Antoine Théate, João Rua
    This file is part of CDP4-COMET WEB Community Edition
     The CDP4-COMET WEB Community Edition is the Starion Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
    The CDP4-COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.
    The CDP4-COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.
    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using COMETwebapp.Extensions
@inherits SelectedDataItemForm

<EditForm Context="editFormContext" Model="@(this.ViewModel.File)" OnValidSubmit="@(async () => await this.OnValidSubmit())">
    <FluentValidationValidator />
    <DxFormLayout CssClass="w-100">
        <DxFormLayoutItem Caption="Is Locked:" ColSpanMd="6">
            <DxCheckBox @bind-Checked="@this.ViewModel.IsLocked" />
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="@($"Locked By: {this.ViewModel.File.LockedBy?.Name}")" ColSpanMd="6"/>
        <DxFormLayoutItem Caption="Owner:" ColSpanMd="10">
            <DomainOfExpertiseSelector ViewModel="@(this.ViewModel.DomainOfExpertiseSelectorViewModel)"
                                       DisplayText="@(string.Empty)"
                                       CssClass="cw-480" />
        </DxFormLayoutItem>
        
        @if (this.ShouldCreate)
        {
            <DxFormLayoutItem Caption="Containing Folder:" ColSpanMd="10">
                <DxComboBox Data="@this.ViewModel.Folders"
                            TextFieldName="@nameof(Folder.Name)"
                            NullText="root"
                            @bind-Value="@this.ViewModel.SelectedFolder"
                            CssClass="cw-480">
                    <ItemTemplate Context="itemTemplateContext">
                        @itemTemplateContext.GetFolderPath()
                    </ItemTemplate>
                </DxComboBox>
            </DxFormLayoutItem>
        }
        
        <DxFormLayoutItem Caption="File Revisions:"
                          ColSpanMd="12"
                          CaptionPosition="CaptionPosition.Vertical">
            <FileRevisionsTable @bind-FileRevisions="@(this.ViewModel.SelectedFileRevisions)"
                                ViewModel="@(this.ViewModel.FileRevisionHandlerViewModel)"/>
        </DxFormLayoutItem>

    </DxFormLayout>
    <div class="pt-3"></div>
    <ValidationSummary />
    <div class="dxbl-grid-edit-form-buttons">
        <DxButton Id="deleteFileButton"
                  Click="@(() => this.IsDeletePopupVisible = true)"
                  RenderStyle="ButtonRenderStyle.Danger">
            Delete
        </DxButton>
        <DxButton SubmitFormOnClick="true"
                  Enabled="@(this.ViewModel.SelectedFileRevisions.Any())">
            Save
        </DxButton>

        <DxButton Id="cancelFileButton"
                  Click="@(() => this.OnCancel())"
                  RenderStyle="ButtonRenderStyle.Secondary">
            Cancel
        </DxButton>
    </div>
</EditForm>

<DxPopup @bind-Visible="@this.IsDeletePopupVisible" HeaderText="Please confirm" Width="auto" CloseOnOutsideClick="false">
    You are about to delete the File: @(this.ViewModel.File.CurrentFileRevision?.Name)
    <div class="dxbl-grid-confirm-dialog-buttons">
        <DxButton Text="Cancel " RenderStyle="ButtonRenderStyle.Success" Click="@(() => this.IsDeletePopupVisible = false)" />
        <DxButton Text="Confirm" RenderStyle="ButtonRenderStyle.Danger" Click="@(() => this.OnDelete())" Id="deleteFilePopupButton" />
    </div>
</DxPopup>
